{"version":3,"sources":["Components/Widgets/Notifications.js"],"names":["TabContainer","_ref","children","dir","_jsx","Typography","component","style","padding","withStyles","withTheme","props","value","setValue","useState","messages","setMessages","notificationTypes","setNotificationTypes","notifications","setNotifications","useEffect","getMessages","getNotificationTypes","getNotifications","api","get","then","response","data","catch","error","console","log","getNotificationName","notificationId","notificationType","id","_jsxs","className","concat","class","icon","Name","theme","Fragment","AppBar","position","color","Tabs","onChange","handleChange","event","indicatorColor","textColor","variant","Tab","label","IntlMessages","Scrollbars","autoHeight","autoHeightMin","autoHeightMax","autoHide","SwipeableViews","axis","direction","index","onChangeIndex","map","notification","key","date","userName","src","userAvatar","alt","width","height","message","from"],"mappings":"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","file":"static/js/69.b258867f.chunk.js","sourcesContent":["/**\n * Notifications Widget\n */\nimport React, { useState, useEffect, Fragment } from 'react';\nimport { withStyles } from '@material-ui/core/styles';\nimport SwipeableViews from 'react-swipeable-views';\nimport AppBar from '@material-ui/core/AppBar';\nimport Tabs from '@material-ui/core/Tabs';\nimport Tab from '@material-ui/core/Tab';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport Typography from '@material-ui/core/Typography';\n\n// api\nimport api from 'Api';\n\n// intl messages\nimport IntlMessages from 'Util/IntlMessages';\n\nfunction TabContainer({ children, dir }) {\n   return (\n      <Typography component=\"div\" dir={dir} style={{ padding: 8 * 3 }}>\n         {children}\n      </Typography>\n   );\n}\n\nfunction Notifications(props) {\n   const [value, setValue] = useState(0);\n   const [messages, setMessages] = useState(null);\n   const [notificationTypes, setNotificationTypes] = useState(null);\n   const [notifications, setNotifications] = useState(null);\n\n   useEffect(() => {\n      getMessages();\n      getNotificationTypes();\n      getNotifications();\n   },[]);\n\n   // get messages\n   const getMessages = () => {\n      api.get('messages.js')\n         .then((response) => {\n            setMessages(response.data);\n         })\n         .catch(error => {\n            console.log(error);\n         })\n   }\n\n   // get notification types\n   const getNotificationTypes = () => {\n      api.get('notificationTypes.js')\n         .then((response) => {\n            setNotificationTypes(response.data);\n         })\n         .catch(error => {\n            console.log(error);\n         })\n   }\n\n   // get notifications\n   const getNotifications = () => {\n      api.get('notifications.js')\n         .then((response) => {\n            setNotifications(response.data);\n         })\n         .catch(error => {\n            console.log(error);\n         })\n   }\n\n   const handleChange = (event, value) => {\n      setValue(value);\n   };\n\n   const handleChangeIndex = index => {\n      setValue(index);\n   };\n\n   /**\n    * Function to return notification name\n    */\n   const getNotificationName = (notificationId) => {\n      if (notificationTypes) {\n         for (const notificationType of notificationTypes) {\n            if (notificationId === notificationType.id) {\n               return (\n                  <span className={`text-${notificationType.class} mr-5`}>\n                     <i className={`zmdi zmdi-${notificationType.icon}`}></i> {notificationType.Name}\n                  </span>\n               );\n            }\n         }\n      }\n   }\n\n   const { theme } = props;\n   return (\n      <Fragment>\n         <AppBar position=\"static\" color=\"default\">\n            <Tabs\n               value={value}\n               onChange={handleChange}\n               indicatorColor=\"primary\"\n               textColor=\"primary\"\n               variant=\"fullWidth\"\n            >\n               <Tab label={<IntlMessages id=\"widgets.recentNotifications\" />} />\n               <Tab label={<IntlMessages id=\"widgets.messages\" />} />\n            </Tabs>\n         </AppBar>\n         <Scrollbars className=\"rct-scroll\" autoHeight autoHeightMin={100} autoHeightMax={375} autoHide>\n            <SwipeableViews\n               axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\n               index={value}\n               onChangeIndex={handleChangeIndex}>\n               <div className=\"card mb-0 notification-box\">\n                  <TabContainer dir={theme.direction}>\n                     <ul className=\"list-inline mb-0\">\n                        {notifications && notifications.map((notification, key) => (\n                           <li className=\"d-flex justify-content-between\" key={key}>\n                              <div className=\"align-items-start\">\n                                 <p className=\"mb-5 message-head\">\n                                    {getNotificationName(notification.notificationId)}\n                                    {notification.date}\n                                 </p>\n                                 <h5 className=\"mb-5\">{notification.userName}</h5>\n                                 <p className=\"mb-0 text-muted\">{notification.notification}</p>\n                              </div>\n                              <div className=\"align-items-end notify-user\">\n                                 <img src={notification.userAvatar} alt=\"notify user\" className=\"rounded-circle\" width=\"50\" height=\"50\" />\n                              </div>\n                           </li>\n                        ))}\n                     </ul>\n                  </TabContainer>\n               </div>\n               <div className=\"card mb-0 notification-box\">\n                  <TabContainer dir={theme.direction}>\n                     <ul className=\"list-inline mb-0\">\n                        {messages && messages.map((message, key) => (\n                           <li className=\"d-flex justify-content-between\" key={key}>\n                              <div className=\"align-items-start\">\n                                 <p className=\"mb-5 message-head\">\n                                    <span className=\"text-primary mr-5\">\n                                       <i className=\"zmdi zmdi-comment-alt-text\"></i> <IntlMessages id=\"widgets.messages\" /></span> {message.date}\n                                 </p>\n                                 <h5 className=\"mb-5\">{message.from.userName}</h5>\n                                 <p className=\"mb-0 text-muted\">{message.message}</p>\n                              </div>\n                              <div className=\"align-items-end notify-user\">\n                                 <img src={message.from.userAvatar} alt=\"notify user\" className=\"rounded-circle\" width=\"50\" height=\"50\" />\n                              </div>\n                           </li>\n                        ))}\n                     </ul>\n                  </TabContainer>\n               </div>\n            </SwipeableViews>\n         </Scrollbars>\n      </Fragment>\n   );\n}\n\nexport default withStyles(null, { withTheme: true })(Notifications);\n"],"sourceRoot":""}