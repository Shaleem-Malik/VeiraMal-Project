{"version":3,"sources":["Components/Widgets/ToDoList.js"],"names":["TodoListWidget","toDoListData","setToDoListData","useState","sectionReload","setSectionReload","addNewTodoDialog","setAddNewTodoDialog","newTodo","setNewTodo","todoTitle","time","date","snackbar","setSnackbar","snackbarMessage","setSnackbarMessage","useEffect","getTodo","api","get","then","response","data","catch","error","handleChange","value","selectedTodoIndex","indexOf","newState","update","completed","$set","setTimeout","handleClose","_jsxs","Fragment","children","_jsx","RctSectionLoader","Scrollbars","className","autoHeight","autoHeightMin","autoHeightMax","autoHide","List","map","key","ListItem","button","onClick","classnames","FormControlLabel","control","Checkbox","checked","color","onChange","event","target","title","Fab","variant","size","e","onDeleteTask","task","stopPropagation","todos","index","splice","Button","IntlMessages","id","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","TextField","margin","_objectSpread","label","type","fullWidth","InputLabelProps","shrink","DialogActions","addNewTodo","todo","push","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","snackbarcontentprops","message"],"mappings":"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","file":"static/js/101.bf8ac5aa.chunk.js","sourcesContent":["/**\n * Todo List Widget\n */\nimport React, { useState, Fragment, useEffect } from 'react';\nimport { FormControlLabel, Checkbox, List, ListItem, Button, TextField, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Snackbar, Fab} from '@material-ui/core';\nimport update from 'react-addons-update';\nimport classnames from 'classnames';\nimport { Scrollbars } from 'react-custom-scrollbars';\n// api\nimport api from 'Api';\n// intl messages\nimport IntlMessages from 'Util/IntlMessages';\n// rct section loader\nimport RctSectionLoader from 'Components/RctSectionLoader/RctSectionLoader';\n\nfunction TodoListWidget() {\n   const [toDoListData, setToDoListData] = useState(null);\n   const [sectionReload, setSectionReload] = useState(false);\n   const [addNewTodoDialog, setAddNewTodoDialog] = useState(false);\n   const [newTodo, setNewTodo] = useState({\n      todoTitle: '',\n      time: null,\n      date: ''\n   });\n   const [snackbar, setSnackbar] = useState(false);\n   const [snackbarMessage, setSnackbarMessage] = useState('')\n\n   useEffect(() => {\n      getTodo();\n   },[])\n\n   // get todo\n   const getTodo = () =>  {\n      setSectionReload(true);\n      api.get('todo.js')\n         .then((response) => {\n            setToDoListData(response.data);\n            setSectionReload(false)\n         }).catch(error => {\n            setToDoListData(null);\n            setSectionReload(false);\n         })\n   }\n\n   /**\n    * On Delete Task\n    */\n   const onDeleteTask = (e, task) => {\n      e.stopPropagation();\n      setSectionReload(true);\n      let todos = toDoListData;\n      let index = todos.indexOf(task);\n\n      setTimeout(() => {\n         todos.splice(index, 1);\n         setToDoListData(todos);\n         setSectionReload(false);\n         setSnackbar(true);\n         setSnackbarMessage('Todo Deleted Successfully');\n      }, 1500);\n   }\n\n   // on change task status\n   const handleChange = (value, data) => {\n      let selectedTodoIndex = toDoListData.indexOf(data);\n      let newState = update(toDoListData, {\n         [selectedTodoIndex]: {\n            completed: { $set: value }\n         }\n      });\n      setSectionReload(true);\n      setTimeout(() => {\n         setToDoListData(newState);\n         setSectionReload(false);\n         setSnackbar(true);\n         setSnackbarMessage('Todo Updated');\n      }, 1500);\n   }\n\n   // open add new todo dialog\n   const opnAddNewTodoDialog = () => {\n      setAddNewTodoDialog(true);\n      setNewTodo({\n         todoTitle: '',\n         time: null,\n         date: ''\n      });\n   }\n\n   // handle close add new todo dailog\n   const handleClose = () => {\n      setAddNewTodoDialog(false);\n   }\n\n   // add new todo\n   const addNewTodo = () => {\n      if (newTodo.todoTitle !== '' && newTodo.date) {\n         let todos = toDoListData;\n         let todo\n         todo = {\n            title: newTodo.todoTitle,\n            date: newTodo.date,\n            completed: false\n         }\n         setSectionReload(true);\n         setAddNewTodoDialog(false);\n         setTimeout(() => {\n            todos.push(todo);\n            \n            setToDoListData(todos);\n            setSectionReload(false);\n            setSnackbar(true);\n            setSnackbarMessage('Todo Added Successfully!');\n         }, 1500);\n      }\n   }\n\n   return (\n      <Fragment>\n         {sectionReload &&\n            <RctSectionLoader />\n         }\n         <Scrollbars className=\"rct-scroll\" autoHeight autoHeightMin={100} autoHeightMax={420} autoHide>\n            <List className=\"p-0\">\n               {toDoListData && toDoListData.map((data, key) => (\n                  <ListItem className=\"border-bottom\" button key={key} onClick={() => handleChange(!data.completed, data)}>\n                     <div className={classnames('d-flex justify-content-between align-items-center w-100', { 'strike': data.completed })}>\n                        <div className=\"d-flex align-items-center clearfix\">\n                           <div className=\"float-left\">\n                              <FormControlLabel\n                                 className=\"mb-0\"\n                                 control={\n                                    <Checkbox\n                                       checked={data.completed}\n                                       color=\"primary\"\n                                       onChange={(event) => handleChange(event.target.checked, data)}\n                                    />\n                                 }\n                              />\n                           </div>\n                           <div className=\"float-left\">\n                              <p className=\"mb-0\">{data.title}</p>\n                              {data.date && <span className=\"d-block fs-12 text-muted\">{data.date}</span>}\n                           </div>\n                        </div>\n                        <div className=\"hover-action\">\n                           <Fab variant=\"round\" size=\"small\" className=\"btn-danger text-white\"\n                              onClick={(e) => onDeleteTask(e, data)}\n                           >\n                              <i className=\"zmdi zmdi-delete\"></i>\n                           </Fab>\n                        </div>\n                     </div>\n                  </ListItem>\n               ))}\n            </List>\n         </Scrollbars>\n         <div className=\"d-flex p-3\">\n            <Button variant=\"contained\" color=\"primary\" className=\"text-white\" onClick={() => opnAddNewTodoDialog()}><IntlMessages id=\"widgets.addNew\" /></Button>\n         </div>\n         <Dialog\n            open={addNewTodoDialog}\n            onClose={handleClose}\n            aria-labelledby=\"form-dialog-title\">\n            <DialogTitle id=\"form-dialog-title\">\n               <IntlMessages id=\"components.addNewTasks\" />\n            </DialogTitle>\n            <DialogContent>\n               <DialogContentText>\n                  Add New Todo, Add Todo Title And Select Time For Todo.\n                  </DialogContentText>\n               <TextField\n                  margin=\"dense\"\n                  id=\"name\"\n                  onChange={(e) => setNewTodo({ ...newTodo, todoTitle: e.target.value})}\n                  label=\"Todo Title\"\n                  type=\"text\"\n                  fullWidth\n                  value={newTodo.todoTitle}\n               />\n               <TextField\n                  id=\"date\"\n                  label=\"Schedule Date\"\n                  type=\"date\"\n                  InputLabelProps={{\n                     shrink: true\n                  }}\n                  fullWidth\n                  onChange={(e) => setNewTodo({ ...newTodo, date: e.target.value })}\n               />\n            </DialogContent>\n            <DialogActions>\n               <Button variant=\"contained\" onClick={handleClose} className=\"btn-danger text-white\">\n                  <span><IntlMessages id=\"button.cancel\" /></span>\n               </Button>\n               <Button variant=\"contained\" onClick={addNewTodo} color=\"primary\" className=\"text-white\">\n                  <span><IntlMessages id=\"button.add\" /></span>\n               </Button>\n            </DialogActions>\n         </Dialog>\n         <Snackbar\n            anchorOrigin={{\n               vertical: 'top',\n               horizontal: 'center',\n            }}\n            open={snackbar}\n            onClose={() => setSnackbar(false)}\n            autoHideDuration={2000}\n            snackbarcontentprops={{\n               'aria-describedby': 'message-id',\n            }}\n            message={<span id=\"message-id\">{snackbarMessage}</span>}\n         />\n      </Fragment>\n   )\n}\n\nexport default TodoListWidget;"],"sourceRoot":""}