{"version":3,"sources":["Components/Widgets/NewEmails.js"],"names":["withRouter","props","sectionReload","setSectionReload","useState","newEmails","setNewEmails","openConfirmationAlert","setOpenConfirmationAlert","selectedDeletedEmail","setSelectedDeletedEmail","snackbar","setSnackbar","snackbarMessage","setSnackbarMessage","selectedEmail","setSelectedEmail","viewEmailDialog","setViewEmailDialog","useEffect","api","get","then","response","data","catch","error","console","log","handleCloseConfirmationAlert","_jsxs","Fragment","children","_jsx","RctSectionLoader","Scrollbars","className","autoHeight","autoHeightMin","autoHeightMax","autoHide","map","email","key","Media","sender_avatar","Avatar","sender_name","charAt","object","src","alt","width","height","body","from","subject","message","replyTextBox","InputGroup","Input","InputGroupAddon","addonType","Button","variant","color","onClick","indexOfEmail","indexOf","update","$set","setTimeout","replyEmail","IntlMessages","id","Fab","size","onViewEmal","onDeleteEmail","showReplyTextBox","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","DialogActions","deleteEmail","emails","deletedEmailIndex","splice","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","snackbarcontentprops"],"mappings":"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","file":"static/js/65.063560a5.chunk.js","sourcesContent":["/**\n * New Emails Widget\n */\nimport React, { useEffect, Fragment, useState } from 'react';\nimport { Media } from 'reactstrap';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { InputGroup, InputGroupAddon, Input } from 'reactstrap';\nimport update from 'react-addons-update';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport Avatar from '@material-ui/core/Avatar';\nimport { withRouter } from 'react-router-dom';\n// api\nimport api from 'Api';\n// intl messages\nimport IntlMessages from 'Util/IntlMessages';\n// rct section loader\nimport RctSectionLoader from 'Components/RctSectionLoader/RctSectionLoader';\nimport { Fab } from '@material-ui/core';\n\nfunction NewEmails(props) {\n   const [sectionReload, setSectionReload] = useState(false);\n   const [newEmails, setNewEmails] = useState(null);\n   const [openConfirmationAlert, setOpenConfirmationAlert] = useState(false);\n   const [selectedDeletedEmail, setSelectedDeletedEmail] = useState(null);\n   const [snackbar, setSnackbar] = useState(false);\n   const [snackbarMessage, setSnackbarMessage] = useState('');\n   const [selectedEmail, setSelectedEmail] = useState(null);\n   const [viewEmailDialog, setViewEmailDialog] = useState(false);\n\n   useEffect(() => {\n      api.get('newEmails.js')\n         .then((response) => {\n            setNewEmails(response.data);\n         })\n         .catch(error => {\n            console.log(error);\n         })\n   },[])\n   \n\n   // on delete email open confirmation\n   const onDeleteEmail = (email) => {\n      setOpenConfirmationAlert(true);\n      setSelectedDeletedEmail(email);\n   }\n\n   // close confirmation dailog\n   const handleCloseConfirmationAlert = () => {\n      setOpenConfirmationAlert(false);\n      setViewEmailDialog(false);\n   }\n\n   // delete email if confirmation true\n   const deleteEmail = () => {\n      let emails = newEmails;\n      let deletedEmailIndex = emails.indexOf(selectedDeletedEmail);\n      emails.splice(deletedEmailIndex, 1);\n      setTimeout(() => {\n         setSectionReload(false);\n         setNewEmails(emails);\n         setOpenConfirmationAlert(false);\n         setSnackbar(true);\n         setSnackbarMessage('Email Deleted Successfully!');\n      }, 1500);\n   }\n\n   // show reply text box\n   const showReplyTextBox = (email) =>  {\n      let indexOfEmail = newEmails.indexOf(email);\n      setNewEmails(update(newEmails,\n         {\n            [indexOfEmail]: {\n               replyTextBox: { $set: true }\n            }\n         }\n      ));\n   }\n\n   // reply email\n   const replyEmail = (email) => {\n      let indexOfEmail = newEmails.indexOf(email);\n      setSectionReload(true);\n      setNewEmails(update(newEmails,\n         {\n            [indexOfEmail]: {\n               replyTextBox: { $set: false }\n            }\n         }\n      ));\n      setTimeout(() => {\n         setSectionReload(false);\n         setSnackbar(true);\n         setSnackbarMessage('Reply Sent Successfully!');\n      }, 1500);\n   }\n\n   /**\n    * On View Email\n    */\n   const onViewEmal = (email) => {\n      setSelectedEmail(email);\n      setViewEmailDialog(true);\n   }\n\n\n   return (\n      <Fragment>\n         {sectionReload &&\n            <RctSectionLoader />\n         }\n         <Scrollbars className=\"rct-scroll\" autoHeight autoHeightMin={100} autoHeightMax={400} autoHide>\n            <ul className=\"new-mail mb-0 list-unstyled\">\n               {newEmails && newEmails.map((email, key) => (\n                  <li key={key}>\n                     <div className=\"d-flex justify-content-between\">\n                        <Media className=\"mb-10\">\n                           {email.sender_avatar === '' ?\n                              <Avatar className=\"mr-15\">{email.sender_name.charAt(0)}</Avatar>\n                              : <Media object src={email.sender_avatar} alt=\"User Profile 1\" className=\"rounded-circle mr-15\" width=\"40\" height=\"40\" />\n                           }\n                           <Media body>\n                              <h5 className=\"m-0 pt-5 fs-14\">{email.sender_name}</h5>\n                              <span className=\"fs-12 align-self-center\">{email.from}</span>\n                           </Media>\n                        </Media>\n                        <span className=\"small align-self-center\">19 Mar 2017</span>\n                     </div>\n                     <div className=\"d-flex justify-content-between\">\n                        <div className=\"text-justify\">\n                           <p className=\"subject\">{email.subject}</p>\n                           <p className=\"message\">{email.message}</p>\n                           {email.replyTextBox &&\n                              <div className=\"task-foot d-flex justify-content-between\">\n                                 <InputGroup>\n                                    <Input />\n                                    <InputGroupAddon addonType=\"append\">\n                                       <Button variant=\"contained\" color=\"primary\" className=\"text-white\" onClick={() => replyEmail(email)}>\n                                          <IntlMessages id=\"button.reply\" />\n                                       </Button>\n                                    </InputGroupAddon>\n                                 </InputGroup>\n                              </div>\n                           }\n                        </div>\n                        <div className=\"hover-action text-right w-25 align-self-center\">\n                           <Fab variant=\"round\" size=\"small\" color=\"primary\" className=\"text-white mr-5 mb-5\"\n                              onClick={() => onViewEmal(email)}\n                           >\n                              <i className=\"zmdi zmdi-eye\"></i>\n                           </Fab>\n                           <Fab variant=\"round\" size=\"small\" className=\"btn-danger text-white mr-5 mb-5\"\n                              onClick={() => onDeleteEmail(email)}\n                           >\n                              <i className=\"zmdi zmdi-delete\"></i>\n                           </Fab>\n                           <Fab variant=\"round\" size=\"small\" className=\"btn-success text-white mr-5 mb-5\"\n                              onClick={() => showReplyTextBox(email)}\n                           >\n                              <i className=\"zmdi zmdi-mail-reply\"></i>\n                           </Fab>\n                        </div>\n                     </div>\n                  </li>\n               ))}\n            </ul>\n         </Scrollbars>\n         <Dialog\n            open={openConfirmationAlert}\n            onClose={handleCloseConfirmationAlert}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n         >\n            <DialogTitle id=\"alert-dialog-title\">{\"Are You Sure Want To Delete?\"}</DialogTitle>\n            <DialogContent>\n               <DialogContentText id=\"alert-dialog-description\">\n                  This will delete the email permanently from your emails.\n         </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n               <Button variant=\"contained\" className=\"btn-danger text-white\" onClick={handleCloseConfirmationAlert}>\n                  <IntlMessages id=\"button.cancel\" />\n               </Button>\n               <Button variant=\"contained\" color=\"primary\" className=\"text-white\" onClick={() => deleteEmail()}>\n                  <IntlMessages id=\"button.delete\" />\n               </Button>\n            </DialogActions>\n         </Dialog>\n         <Dialog\n            open={viewEmailDialog}\n            onClose={handleCloseConfirmationAlert}\n            aria-labelledby=\"alert-dialog-title\"\n            aria-describedby=\"alert-dialog-description\"\n         >\n            <DialogContent>\n               {selectedEmail !== null &&\n                  <div>\n                     <div className=\"d-flex justify-content-between\">\n                        <Media className=\"mb-10\">\n                           {selectedEmail.sender_avatar === '' ?\n                              <Avatar className=\"mr-15\">{selectedEmail.sender_name.charAt(0)}</Avatar>\n                              : <Media object src={selectedEmail.sender_avatar} alt=\"User Profile 1\" className=\"rounded-circle mr-15\" width=\"40\" height=\"40\" />\n                           }\n                           <Media body>\n                              <h5 className=\"m-0 pt-5 fs-14\">{selectedEmail.sender_name}</h5>\n                              <span className=\"fs-12 align-self-center\">{selectedEmail.from}</span>\n                           </Media>\n                        </Media>\n                        <span className=\"small align-self-center\">19 Mar 2017</span>\n                     </div>\n                     <div className=\"d-flex justify-content-between\">\n                        <div className=\"text-justify\">\n                           <p className=\"subject\">{selectedEmail.subject}</p>\n                           <p className=\"message\">{selectedEmail.message}</p>\n                        </div>\n                     </div>\n                  </div>\n               }\n            </DialogContent>\n         </Dialog>\n         <Snackbar\n            anchorOrigin={{\n               vertical: 'top',\n               horizontal: 'center',\n            }}\n            open={snackbar}\n            onClose={() => setSnackbar(false)}\n            autoHideDuration={2000}\n            snackbarcontentprops={{\n               'aria-describedby': 'message-id',\n            }}\n            message={<span id=\"message-id\">{snackbarMessage}</span>}\n         />\n      </Fragment>\n   );\n}\n\nexport default withRouter(NewEmails);\n"],"sourceRoot":""}