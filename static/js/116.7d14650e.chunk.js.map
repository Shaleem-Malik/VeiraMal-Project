{"version":3,"sources":["Components/Widgets/WeatherV2.js"],"names":["getIcon","id","WeatherWidgets","props","weatherData","setWeatherData","useState","city","useEffect","axios","get","then","response","data","catch","error","console","log","_jsxs","Fragment","children","_jsx","className","name","moment","format","list","weather","temp","day","renderFiveDayForecast","elements","i","length","ele","dt","max","main","push"],"mappings":"yGAAA,mDAQA,SAASA,EAAQC,GACf,OAAQA,GACN,KAAKA,GAAM,KAAOA,EAAK,IACrB,MAAO,sBACT,KAAKA,GAAM,KAAOA,EAAK,IACrB,MAAO,eACT,KAAKA,GAAM,KAAOA,EAAK,IACrB,MAAO,sBACT,KAAKA,GAAM,KAAOA,EAAK,IACrB,MAAO,iBACT,KAAKA,GAAM,KAAOA,EAAK,IACrB,MAAO,gBACT,KAAY,MAAPA,EACH,MAAO,kBACT,KAAKA,GAAM,KAAOA,EAAK,IACrB,MAAO,4BACT,KAAKA,GAAM,KAAOA,EAAK,IACrB,MAAO,mBACT,KAAY,MAAPA,GAAeA,GAAM,KAAOA,GAAM,IACrC,MAAO,kBACT,KAAKA,GAAM,KAAOA,EAAK,IACrB,MAAO,sBAIb,CAiEeC,UA9Df,SAAwBC,GACrB,MAAOC,EAAaC,GAAkBC,mBAAS,MACzCC,EAAOJ,EAAMI,KAAOJ,EAAMI,KAAO,WAiCvC,OA/BAC,qBAAU,KAGPC,IAAMC,IAAI,4DAA8DH,EAA9D,iHACNI,MAAKC,IACHP,EAAeO,EAASC,KAAK,IAE/BC,OAAMC,IACJC,QAAQC,IAAI,kCAAmCF,EAAM,GACtD,GACL,CAACR,IAsBDW,eAACC,WAAQ,CAAAC,SAAA,CACNC,cAAA,OAAKC,UAAU,6DAA4DF,SACvD,OAAhBhB,GACDc,eAAA,OAAKI,UAAU,mCAAkCF,SAAA,CAC9CF,eAAA,OAAKI,UAAU,oDAAmDF,SAAA,CAC/DF,eAAA,OAAKI,UAAU,oBAAmBF,SAAA,CAClCC,cAAA,MAAAD,SAAKhB,EAAYG,KAAKgB,OACtBF,cAAA,QAAAD,SAAOI,MAASC,OAAO,qBAEvBJ,cAAA,KAAGC,UAAWtB,EAAQI,EAAYsB,KAAK,GAAGC,QAAQ,GAAG1B,SAExDoB,cAAA,OAAKC,UAAU,eAAcF,SAC1BF,eAAA,MAAAE,SAAA,CAAKhB,EAAYsB,KAAK,GAAGE,KAAKC,IAAIR,cAAA,OAAAD,SAAK,oBAKhDC,cAAA,OAAKC,UAAU,iBAAgBF,SAC5BC,cAAA,MAAIC,UAAU,mBAAkBF,SArCXU,MAC3B,IAAIC,EAAW,GACf,GAAI3B,EACD,IAAK,IAAI4B,EAAI,EAAGA,EAAI5B,EAAYsB,KAAKO,OAAQD,IAAK,CAClD,MAAML,EAAUvB,EAAYsB,KAAKM,GACjC,IAAIE,EAAMhB,eAAA,MAAII,UAAU,oDAAmDF,SAAA,CACxEF,eAAA,QAAMI,UAAU,OAAMF,SAAA,CAAEb,EAAK,KAAGiB,IAAoB,IAAbG,EAAQQ,IAAWV,OAAO,kBACjEJ,cAAA,OAAKC,UAAU,SAAQF,SACpBC,cAAA,KAAGC,UAAWtB,EAAQ2B,EAAQA,QAAQ,GAAG1B,QAE5CiB,eAAA,QAAMI,UAAU,UAASF,SAAA,CAAEO,EAAQC,KAAKQ,IAAIf,cAAA,OAAAD,SAAK,aACjDC,cAAA,QAAMC,UAAU,UAASF,SAAEO,EAAQA,QAAQ,GAAGU,SANgCV,EAAQQ,IAQzFJ,EAASO,KAAKJ,EACd,CAEH,OAAOH,CAAQ,EAsBRD,SAKb,C","file":"static/js/116.7d14650e.chunk.js","sourcesContent":["/**\n * Weather V2 Widget\n */\nimport React, { useState, Fragment, useEffect } from 'react';\nimport moment from 'moment';\nimport axios from 'axios';\n\n// function to get today weather icon\nfunction getIcon(id) {\n  switch (id) {\n    case id >= 200 && id < 300:\n      return 'wi wi-night-showers'\n    case id >= 300 && id < 500:\n      return 'wi day-sleet';\n    case id >= 500 && id < 600:\n      return 'wi wi-night-showers';\n    case id >= 600 && id < 700:\n      return 'wi wi-day-snow';\n    case id >= 700 && id < 800:\n      return 'wi wi-day-fog';\n    case id === 800:\n      return 'wi wi-day-sunny';\n    case id >= 801 && id < 803:\n      return 'wi wi-night-partly-cloudy';\n    case id >= 802 && id < 900:\n      return 'wi wi-day-cloudy';\n    case id === 905 || (id >= 951 && id <= 956):\n      return 'wi wi-day-windy';\n    case id >= 900 && id < 1000:\n      return 'wi wi-night-showers'\n    default:\n      break;\n  }\n}\n\n// Main component\nfunction WeatherWidgets(props) {\n   const [weatherData, setWeatherData] = useState(null);\n   const city = props.city ? props.city : 'New York';\n   \n   useEffect(() => {\n      var appid = 'b1b15e88fa797225412429c1c50c122a1'; // Your api id\n      var apikey = '69b72ed255ce5efad910bd946685883a'; //Your apikey\n      axios.get('https://api.openweathermap.org/data/2.5/forecast/daily?q=' + city + '&cnt=5&units=metric&mode=json&appid=' + appid + '&apikey=' + apikey)\n         .then(response => {\n            setWeatherData(response.data);\n         })\n         .catch(error => {\n            console.log('Error fetching and parsing data', error);\n         });\n   }, [city])\n   \n\n   const renderFiveDayForecast = () => {\n      let elements = [];\n      if (weatherData) {\n         for (let i = 1; i < weatherData.list.length; i++) {\n         const weather = weatherData.list[i];\n         let ele = <li className=\"d-flex justify-content-between align-items-center\" key={weather.dt}>\n            <span className=\"w-50\">{city}, {moment(weather.dt * 1000).format('ddd DD MMMM')}</span>\n            <div className=\"w-icon\">\n               <i className={getIcon(weather.weather[0].id)}></i>\n            </div>\n            <span className=\"d-block\">{weather.temp.max}<sup>°C</sup></span>\n            <span className=\"d-block\">{weather.weather[0].main}</span>\n         </li>;\n         elements.push(ele);\n         }\n      }\n      return elements;\n   }\n   return (\n      <Fragment>\n         <div className=\"weather-top rct-weather-widget overflow-hidden rounded-top\">\n            {weatherData !== null &&\n            <div className=\"black-overlay weather-over py-20\">\n               <div className=\"weather-head mb-20 d-flex justify-content-between\">\n                  <div className=\"align-items-start\">\n                  <h4>{weatherData.city.name}</h4>\n                  <span>{moment().format('ddd, HH:mm A')}</span>\n                  </div>\n                  <i className={getIcon(weatherData.list[0].weather[0].id)}></i>\n               </div>\n               <div className=\"weather-temp\">\n                  <h2>{weatherData.list[0].temp.day}<sup>°C</sup></h2>\n               </div>\n            </div>\n            }\n         </div>\n         <div className=\"weather-bottom\">\n            <ul className=\"list-inline mb-0\">\n            {renderFiveDayForecast()}\n            </ul>\n         </div>\n      </Fragment>\n   )\n}\n\nexport default WeatherWidgets;"],"sourceRoot":""}