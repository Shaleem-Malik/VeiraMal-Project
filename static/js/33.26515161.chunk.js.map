{"version":3,"sources":["Components/Widgets/TaxStats.js","Components/Charts/TinyLineChart.js"],"names":["TaxStats","_ref","label","chartdata","labels","_jsxs","RctCard","children","className","_jsx","IntlMessages","id","CountUp","start","end","duration","useEasing","RctCardContent","noPadding","TinyLineChart","borderColor","ChartConfig","color","primary","pointBackgroundColor","height","pointBorderColor","white","borderWidth","RctCardFooter","customClasses","map","key","props","xAxes","options","legend","display","scales","ticks","min","gridLines","yAxes","suggestedMin","beginAtZero","Line","data","canvas","ctx","getContext","_stroke","stroke","save","shadowColor","shadowBlur","shadowOffsetX","shadowOffsetY","apply","this","arguments","restore","datasets","fill","lineTension","fillOpacity","pointBorderWidth","pointHoverBackgroundColor","pointHoverBorderColor","pointHoverBorderWidth","pointRadius","pointHitRadius"],"mappings":"wGAAA,yEA6CeA,UA/BEC,IAAA,IAAC,MAAEC,EAAK,UAAEC,EAAS,OAAEC,GAAQH,EAAA,OAC1CI,eAACC,IAAO,CAAAC,SAAA,CACJF,eAAA,OAAKG,UAAU,iDAAgDD,SAAA,CAC3DE,cAAA,OAAKD,UAAU,2BAA0BD,SACrCE,cAAA,MAAAF,SAAIE,cAACC,IAAY,CAACC,GAAG,oBAEzBN,eAAA,OAAKG,UAAU,kBAAiBD,SAAA,CAC5BF,eAAA,QAAMG,UAAU,mCAAkCD,SAAA,CAAC,IAACE,cAACG,IAAO,CAACC,MAAO,EAAGC,IAAK,KAAMC,SAAU,EAAGC,WAAW,OAC1GP,cAAA,KAAGD,UAAU,6BAA4BD,SAAC,eAGlDE,cAACQ,IAAc,CAACC,WAAS,EAAAX,SACrBE,cAACU,IAAa,CACVjB,MAAOA,EACPC,UAAWA,EACXC,OAAQA,EACRgB,YAAaC,IAAYC,MAAMC,QAC/BC,qBAAsBH,IAAYC,MAAMC,QACxCE,OAAQ,IACRC,iBAAkBL,IAAYC,MAAMK,MACpCC,YAAa,MAGrBnB,cAACoB,IAAa,CAACC,cAAc,iCAAgCvB,SACxDH,GAAUA,EAAO2B,KAAI,CAAC7B,EAAO8B,IAC1BvB,cAAA,QAAMD,UAAU,mBAAkBD,SAAYL,GAAN8B,SAG1C,C,mCC1Cd,iCA4Eeb,IAlEf,SAAuBc,GACpB,MAAM,OAAE7B,EAAM,MAAEF,EAAK,YAAEkB,EAAW,UAAEjB,EAAS,qBAAEqB,EAAoB,OAAEC,EAAM,iBAAEC,EAAgB,YAAEE,EAAW,MAAEM,GAAUD,EAqChHE,EAAU,CACbC,OAAQ,CACFC,SAAS,GAEfC,OAAQ,CACFJ,MAAO,CAAC,CACLG,QAASH,EACTK,MAAO,CACJC,IAAK,GAERC,UAAW,CACRJ,SAAS,KAGfK,MAAO,CAAC,CACLL,SAAS,EACTE,MAAO,CACJI,aAAc,EACdC,aAAa,OAK5B,OACGnC,cAACoC,IAAI,CAACC,KA5DKC,IACX,MAAMC,EAAMD,EAAOE,WAAW,MACxBC,EAAUF,EAAIG,OAUpB,OATAH,EAAIG,OAAS,WACPH,EAAII,OACJJ,EAAIK,YAAchC,IAAYgC,YAC9BL,EAAIM,WAAa,GACjBN,EAAIO,cAAgB,EACpBP,EAAIQ,cAAgB,GACpBN,EAAQO,MAAMC,KAAMC,WACpBX,EAAIY,SACV,EACO,CACDxD,OAAQA,EACRyD,SAAU,CACP,CACG3D,MAAOA,EACP4D,MAAM,EACNC,YAAa,EACbC,YAAa,GACb5C,YAAaA,EACbQ,YAAaA,EACbF,iBAAkBA,EAClBF,qBAAsBA,EACtByC,iBAAkBrC,EAClBsC,0BAA2B1C,EAC3B2C,sBAAuBzC,EACvB0C,sBAAuBxC,EACvByC,YAAa,EACbC,eAAgB,GAChBxB,KAAM3C,IAGjB,EA2BiBgC,QAASA,EAASV,OAAQA,GAElD,C","file":"static/js/33.26515161.chunk.js","sourcesContent":["/**\n * Tax Stats Widget\n */\nimport React from 'react';\nimport CountUp from 'react-countup';\n// chart\nimport TinyLineChart from 'Components/Charts/TinyLineChart';\n// constants\nimport ChartConfig from 'Constants/chart-config';\n// intl messages\nimport IntlMessages from 'Util/IntlMessages';\n// rct card box\nimport { RctCard, RctCardContent, RctCardFooter } from 'Components/RctCard';\n\nconst TaxStats = ({ label, chartdata, labels }) => (\n    <RctCard>\n        <div className=\"rct-block-title d-flex justify-content-between\">\n            <div className=\"d-flex align-items-start\">\n                <h4><IntlMessages id=\"widgets.tax\" /></h4>\n            </div>\n            <div className=\"align-items-end\">\n                <span className=\"d-block text-muted counter-point\">$<CountUp start={0} end={1200} duration={3} useEasing={true} /></span>\n                <p className=\"text-right mb-0 text-muted\">+64%</p>\n            </div>\n        </div>\n        <RctCardContent noPadding>\n            <TinyLineChart\n                label={label}\n                chartdata={chartdata}\n                labels={labels}\n                borderColor={ChartConfig.color.primary}\n                pointBackgroundColor={ChartConfig.color.primary}\n                height={100}\n                pointBorderColor={ChartConfig.color.white}\n                borderWidth={4}\n            />\n        </RctCardContent>\n        <RctCardFooter customClasses=\"d-flex justify-content-between\">\n            {labels && labels.map((label, key) => (\n                <span className=\"fs-12 text-muted\" key={key}>{label}</span>\n            ))}\n        </RctCardFooter>\n    </RctCard>\n);\n\nexport default TaxStats;\n","/**\n * Tiny Line Chart Component\n */\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\n\n// chart config file\nimport ChartConfig from 'Constants/chart-config';\n\n// Main Component\nfunction TinyLineChart(props){\n   const { labels, label, borderColor, chartdata, pointBackgroundColor, height, pointBorderColor, borderWidth, xAxes } = props;\n   const data = (canvas) => {\n      const ctx = canvas.getContext(\"2d\");\n      const _stroke = ctx.stroke;\n      ctx.stroke = function () {\n            ctx.save();\n            ctx.shadowColor = ChartConfig.shadowColor;\n            ctx.shadowBlur = 13;\n            ctx.shadowOffsetX = 0;\n            ctx.shadowOffsetY = 12;\n            _stroke.apply(this, arguments);\n            ctx.restore();\n      };\n      return {\n            labels: labels,\n            datasets: [\n               {\n                  label: label,\n                  fill: false,\n                  lineTension: 0,\n                  fillOpacity: 0.3,\n                  borderColor: borderColor,\n                  borderWidth: borderWidth,\n                  pointBorderColor: pointBorderColor,\n                  pointBackgroundColor: pointBackgroundColor,\n                  pointBorderWidth: borderWidth,\n                  pointHoverBackgroundColor: pointBackgroundColor,\n                  pointHoverBorderColor: pointBorderColor,\n                  pointHoverBorderWidth: borderWidth,\n                  pointRadius: 1,\n                  pointHitRadius: 10,\n                  data: chartdata\n               }\n            ]\n      }\n   }\n   // chart options\n   const options = {\n      legend: {\n            display: false\n      },\n      scales: {\n            xAxes: [{\n               display: xAxes,\n               ticks: {\n                  min: 0\n               },\n               gridLines: {\n                  display: false\n               }\n            }],\n            yAxes: [{\n               display: false,\n               ticks: {\n                  suggestedMin: 0,\n                  beginAtZero: true\n               }\n            }]\n      }\n   };\n   return (\n      <Line data={data} options={options} height={height} />\n   );    \n}\n\nexport default TinyLineChart;"],"sourceRoot":""}