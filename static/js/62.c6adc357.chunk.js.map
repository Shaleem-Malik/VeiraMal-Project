{"version":3,"sources":["Components/Widgets/LatestPost.js"],"names":["LatestPost","blogPostData","setBlogPostData","useState","snackbar","setSnackbar","sectionReload","setSectionReload","snackbarMessage","setSnackbarMessage","editPostModal","setEditPostModal","editPost","setEditPost","addNewPostForm","setAddNewPostForm","addNewPostDetails","setAddNewPostDetails","body","title","id","date","thumbnail","useEffect","getBlogData","api","get","then","response","data","catch","error","toggleEditPostModal","onChangePostDetails","key","value","_objectSpread","onChangePostAddNewForm","_jsxs","className","children","_jsx","RctSectionLoader","Scrollbars","autoHeight","autoHeightMin","autoHeightMax","autoHide","List","map","ListItem","button","src","alt","href","getTheDate","comments","likes","views","Fab","variant","size","onClick","onEditPost","e","onDeletePost","post","stopPropagation","posts","index","indexOf","setTimeout","splice","RctCardFooter","customClasses","Button","color","IntlMessages","Modal","isOpen","toggle","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","type","name","onChange","target","ModalFooter","onSubmitAddNewPostForm","newPost","Date","getTime","newPosts","push","onSubmitPostEditDetailForm","indexOfPost","i","length","update","$set","Snackbar","anchorOrigin","vertical","horizontal","open","onClose","autoHideDuration","message"],"mappings":"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","file":"static/js/62.c6adc357.chunk.js","sourcesContent":["/**\n * Latest Post Widget\n */\nimport React, { useState, useEffect } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport update from 'react-addons-update';\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport {\n   Modal,\n   ModalHeader,\n   ModalBody,\n   ModalFooter,\n   Form,\n   FormGroup,\n   Label,\n   Input\n} from 'reactstrap';\nimport Button from '@material-ui/core/Button';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport { Fab } from '@material-ui/core';\n// api\nimport api from 'Api';\n//Helper\nimport { getTheDate } from 'Helpers/helpers';\n// card component\nimport { RctCardFooter } from 'Components/RctCard';\n// rct section loader\nimport RctSectionLoader from 'Components/RctSectionLoader/RctSectionLoader';\n// intl messages\nimport IntlMessages from 'Util/IntlMessages';\n\nfunction LatestPost(){\n   const [blogPostData, setBlogPostData] = useState(null);\n   const [snackbar, setSnackbar] = useState(false);\n   const [sectionReload, setSectionReload] = useState(false);\n   const [snackbarMessage, setSnackbarMessage] = useState('');\n   const [editPostModal, setEditPostModal] = useState(false);\n   const [editPost, setEditPost] = useState(null);\n   const [addNewPostForm, setAddNewPostForm] = useState(false);\n   const [addNewPostDetails, setAddNewPostDetails] = useState({\n      body: '',\n      title: '',\n      id: null,\n      date: null,\n      thumbnail: ''\n   })\n   \n   useEffect(() => {\n      getBlogData();\n   },[]);\n\n   // get Blog Data\n   const getBlogData = () => {\n      setSectionReload(true);\n      api.get('blogData.js')\n         .then((response) => {\n            setBlogPostData(response.data);\n            setSectionReload(false);\n         }).catch(error => {\n            setBlogPostData(null);\n            setSectionReload(false);\n         })\n   }\n\n\t/**\n     * On Delete Post\n   */\n   const onDeletePost = (e, post) =>  {\n      e.stopPropagation();\n      setSectionReload(true);\n      let posts = blogPostData;\n      let index = posts.indexOf(post);\n      setTimeout(() => {\n         posts.splice(index, 1);\n         setBlogPostData(posts);\n         setSectionReload(false);\n         setSnackbar(true);\n         setSnackbarMessage('Post Has Been Moved To Trash');\n      }, 1500);\n   }\n\n   // edit Post\n   const onEditPost = (data) => {\n      setEditPostModal(true);\n      setEditPost(data) ;\n      setAddNewPostForm(false);\n   }\n\n   // toggle edit Post modal\n   const toggleEditPostModal = () => {\n      setEditPostModal(!editPostModal);\n   }\n\n   // submit Post edit form\n   const onSubmitPostEditDetailForm = () => {\n      if (editPost.title !== '' && editPost.body !== '') {\n         setEditPostModal(false);\n         setSectionReload(true);\n         let indexOfPost;\n         for (let i = 0; i < blogPostData.length; i++) {\n            const post = blogPostData[i];\n            if (post.id === editPost.id) {\n               indexOfPost = i;\n            }\n         }\n         setTimeout(() => {\n            setSectionReload(false);\n            setSnackbar(true);\n            setSnackbarMessage('Post Updated Successfully');\n            setBlogPostData(update(blogPostData,{\n                  [indexOfPost]: { $set: editPost }\n               }\n            ))\n         }, 1500);\n      }\n   }\n\n   // on change Post details\n   const onChangePostDetails = (key, value) => {\n      setEditPost({\n         ...editPost,\n         [key]: value\n      })\n   }\n\n   // add new Post\n   const addNewPost = () => {\n      setEditPostModal(true);\n      setAddNewPostForm(true);\n      setEditPost(null);\n      setAddNewPostDetails({\n         body: '',\n         title: '',\n         id: null,\n         comments: 0,\n         views: 0,\n         likes: 0,\n         thumbnail: \"http://via.placeholder.com/63X63\"\n      })\n   }\n\n   // on change Post add new form value\n   const onChangePostAddNewForm = (key, value) => {\n      setAddNewPostDetails({\n         ...addNewPostDetails,\n         [key]: value\n      })\n   }\n\n   // on submit add new Post form\n   const onSubmitAddNewPostForm = () => {\n      if (addNewPostDetails.title !== '' && addNewPostDetails.body !== '') {\n         setEditPostModal(false);\n         setSectionReload(true);\n         let newPost = addNewPostDetails;\n         newPost.date = new Date().getTime() / 1000;\n         let newPosts = blogPostData;\n         setTimeout(() => {\n            newPosts.push(newPost);\n            setBlogPostData(newPosts);\n            setSectionReload(false);\n            setSnackbar(true);\n            setSnackbarMessage('Post Added Successfully');\n         }, 1500);\n      }\n   }\n\n   return (\n      <div className=\"blog-list-wrap\">\n         {sectionReload &&\n            <RctSectionLoader />\n         }\n         <Scrollbars className=\"rct-scroll\" autoHeight autoHeightMin={100} autoHeightMax={600} autoHide>\n            <List className=\"p-0\">\n               {blogPostData && blogPostData.map((data, key) => (\n                  <ListItem key={key} button className=\"post-item align-items-center justify-content-between py-25\">\n                     <div className=\"post-content d-flex\">\n                        <div className=\"post-img mr-20\">\n                           <img src={data.thumbnail} alt=\"post-img\" className=\"img-fluid\" />\n                        </div>\n                        <div className=\"post-info\">\n                           <h5><a href=\"!#\">{data.title}</a></h5>\n                           <div className=\"meta-info fs-12 text-muted mb-5\">\n                              <span className=\"mr-15 d-inline-block\"><i className=\"zmdi zmdi-time mr-5\"></i>{getTheDate(data.date, 'DD MMM YYYY')}</span>\n                              <span className=\"mr-15 d-inline-block\"><i className=\"zmdi zmdi-comment mr-5\"></i>{data.comments} comments</span>\n                              <span className=\"mr-15 d-inline-block\"><i className=\"zmdi zmdi-favorite mr-5\"></i>{data.likes} Likes</span>\n                              <span className=\"mr-15 d-inline-block\"><i className=\"zmdi zmdi-eye mr-5\"></i>{data.views} Views</span>\n                           </div>\n                           <p className=\"mb-0\">{data.body}</p>\n                        </div>\n                     </div>\n                     <div className=\"d-flex hover-action\">\n                        <Fab variant=\"round\" size=\"small\" className=\"btn-success text-white m-5\"\n                           onClick={() => onEditPost(data)}\n                        >\n                           <i className=\"zmdi zmdi-edit\"></i>\n                        </Fab>\n                        <Fab variant=\"round\" size=\"small\" className=\"btn-danger text-white m-5\"\n                           onClick={(e) => onDeletePost(e, data)}\n                        >\n                           <i className=\"zmdi zmdi-delete\"></i>\n                        </Fab>\n                     </div>\n                  </ListItem>\n               ))}\n            </List>\n         </Scrollbars>\n         <RctCardFooter customClasses=\"d-flex justify-content-between align-items-center\">\n            <Button variant=\"contained\" color=\"primary\" className=\"text-white\" onClick={() => addNewPost()}>\n               <IntlMessages id=\"widgets.addNew\" />\n            </Button>\n            <span className=\"fs-12 text-base\">\n               <i className=\"mr-15 zmdi zmdi-refresh\"></i>\n               <IntlMessages id=\"widgets.updated10Minago\" />\n            </span>\n         </RctCardFooter>\n         {editPostModal &&\n            <Modal\n               isOpen={editPostModal}\n               toggle={toggleEditPostModal}\n            >\n               <ModalHeader toggle={toggleEditPostModal}>\n                  {addNewPostForm ? 'Add New Post' : 'Edit Post'}\n               </ModalHeader>\n               <ModalBody>\n                  {addNewPostForm ?\n                     <Form>\n                        <FormGroup>\n                           <Label for=\"postTitle\">Title</Label>\n                           <Input\n                              type=\"text\"\n                              name=\"name\"\n                              id=\"postTitle\"\n                              value={addNewPostDetails.title}\n                              onChange={(e) => onChangePostAddNewForm('title', e.target.value)}\n                           />\n                        </FormGroup>\n                        <FormGroup>\n                           <Label for=\"postBody\">Content</Label>\n                           <Input\n                              type=\"textarea\"\n                              name=\"textarea\"\n                              id=\"postBody\"\n                              value={addNewPostDetails.body}\n                              onChange={(e) => onChangePostAddNewForm('body', e.target.value)}\n                           />\n                        </FormGroup>\n                     </Form>\n                     : <Form>\n                        <FormGroup>\n                           <Label for=\"postTitle\">Tilte</Label>\n                           <Input\n                              type=\"text\"\n                              name=\"title\"\n                              id=\"postTitle\"\n                              value={editPost.title}\n                              onChange={(e) => onChangePostDetails('title', e.target.value)}\n                           />\n                        </FormGroup>\n                        <FormGroup>\n                           <Label for=\"postContent\">Content</Label>\n                           <Input\n                              type=\"textarea\"\n                              name=\"content\"\n                              id=\"postContent\"\n                              value={editPost.body}\n                              onChange={(e) => onChangePostDetails('body', e.target.value)}\n                           />\n                        </FormGroup>\n                     </Form>\n                  }\n               </ModalBody>\n               <ModalFooter>\n                  {addNewPostForm ?\n                     <div>\n                        <Button variant=\"contained\" color=\"primary\" className=\"text-white\" onClick={() => onSubmitAddNewPostForm()}><IntlMessages id=\"button.add\" /></Button>{' '}\n                        <Button variant=\"contained\" className=\"btn-danger text-white\" onClick={toggleEditPostModal}><IntlMessages id=\"button.cancel\" /></Button>\n                     </div>\n                     : <div><Button variant=\"contained\" color=\"primary\" className=\"text-white\" onClick={() => onSubmitPostEditDetailForm()}><IntlMessages id=\"button.update\" /></Button>{' '}\n                        <Button variant=\"contained\" className=\"btn-danger text-white\" onClick={toggleEditPostModal}><IntlMessages id=\"button.cancel\" /></Button></div>\n                  }\n               </ModalFooter>\n            </Modal>\n         }\n         <Snackbar\n            anchorOrigin={{\n               vertical: 'top',\n               horizontal: 'center',\n            }}\n            open={snackbar}\n            onClose={() => setSnackbar(false)}\n            autoHideDuration={2000}\n            message={<span id=\"message-id\">{snackbarMessage}</span>}\n         />\n      </div>\n   );\n}\n\nexport default LatestPost;"],"sourceRoot":""}