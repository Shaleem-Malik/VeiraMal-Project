{"version":3,"sources":["Components/Widgets/SalesDoughnutChart.js"],"names":["am4core","am4themes_animated","SalesDoughnutChart","useEffect","chart","am4charts","pieSeries","series","push","dataFields","value","category","innerRadius","slices","template","stroke","strokeWidth","strokeOpacity","cursorOverStyle","alignLabels","labels","bent","radius","padding","ticks","disabled","filters","opacity","hoverShadow","states","getKey","blur","legend","data","dispose","_jsx","RctCardContent","children","id","style","width","height"],"mappings":"wGAAA,4DAWAA,IAAiBC,KA2EFC,UAzEf,WAkEG,OAjEAC,qBAAU,KACP,IAAIC,EAAQJ,IAAe,aAAcK,KAEzC,IAAIC,EAAYF,EAAMG,OAAOC,KAAK,IAAIH,KACtCC,EAAUG,WAAWC,MAAQ,SAC7BJ,EAAUG,WAAWE,SAAW,UAGhCP,EAAMQ,YAAcZ,IAAgB,IAGpCM,EAAUO,OAAOC,SAASC,OAASf,IAAc,QACjDM,EAAUO,OAAOC,SAASE,YAAc,EACxCV,EAAUO,OAAOC,SAASG,cAAgB,EAC1CX,EAAUO,OAAOC,SAEbI,gBAAkB,CAChB,CACG,SAAY,SACZ,MAAS,YAIlBZ,EAAUa,aAAc,EACxBb,EAAUc,OAAON,SAASO,MAAO,EACjCf,EAAUc,OAAON,SAASQ,OAAS,EACnChB,EAAUc,OAAON,SAASS,QAAQ,EAAG,EAAG,EAAG,GAE3CjB,EAAUkB,MAAMV,SAASW,UAAW,EAGvBnB,EAAUO,OAAOC,SAASY,QAAQlB,KAAK,IAAIR,KACjD2B,QAAU,EAGjB,IAGIC,EAHatB,EAAUO,OAAOC,SAASe,OAAOC,OAAO,SAG5BJ,QAAQlB,KAAK,IAAIR,KAoB9C,OAnBA4B,EAAYD,QAAU,GACtBC,EAAYG,KAAO,EAGnB3B,EAAM4B,OAAS,IAAI3B,IAEnBD,EAAM6B,KAAO,CAAC,CACX,QAAW,YACX,OAAU,OACV,CACA,QAAW,YACX,OAAU,OACV,CACA,QAAW,YACX,OAAU,OACV,CACA,QAAW,YACX,OAAU,QAEP,KACC7B,GACDA,EAAM8B,SACT,CACF,GACF,IAGCC,cAACC,IAAc,CAAAC,SACZF,cAAA,OAAKG,GAAG,aAAaC,MAAO,CAAEC,MAAO,OAAQC,OAAQ,YAG9D,C","file":"static/js/92.e6254c35.chunk.js","sourcesContent":["/**\n * Sales doughnut chart\n*/\nimport React, { useEffect } from 'react';\n\n/* amChart Imports */\nimport * as am4core from \"@amcharts/amcharts4/core\";\nimport * as am4charts from \"@amcharts/amcharts4/charts\";\nimport am4themes_animated from \"@amcharts/amcharts4/themes/animated\";\n// rct card box\nimport { RctCardContent } from 'Components/RctCard';\nam4core.useTheme(am4themes_animated);\n\nfunction SalesDoughnutChart() {\n   useEffect(() => {\n      var chart = am4core.create(\"chartsales\", am4charts.PieChart);\n      // Add and configure Series\n      let pieSeries = chart.series.push(new am4charts.PieSeries());\n      pieSeries.dataFields.value = \"litres\";\n      pieSeries.dataFields.category = \"country\";\n\n      // Let's cut a hole in our Pie chart the size of 30% the radius\n      chart.innerRadius = am4core.percent(30);\n\n      // Put a thick white border around each Slice\n      pieSeries.slices.template.stroke = am4core.color(\"#fff\");\n      pieSeries.slices.template.strokeWidth = 2;\n      pieSeries.slices.template.strokeOpacity = 1;\n      pieSeries.slices.template\n         // change the cursor on hover to make it apparent the object can be interacted with\n         .cursorOverStyle = [\n            {\n               \"property\": \"cursor\",\n               \"value\": \"pointer\"\n            }\n         ];\n\n      pieSeries.alignLabels = false;\n      pieSeries.labels.template.bent = true;\n      pieSeries.labels.template.radius = 3;\n      pieSeries.labels.template.padding(0, 0, 0, 0);\n\n      pieSeries.ticks.template.disabled = true;\n\n      // Create a base filter effect (as if it's not there) for the hover to return to\n      let shadow = pieSeries.slices.template.filters.push(new am4core.DropShadowFilter());\n      shadow.opacity = 0;\n\n      // Create hover state\n      let hoverState = pieSeries.slices.template.states.getKey(\"hover\"); // normally we have to create the hover state, in this case it already exists\n\n      // Slightly shift the shadow and make it more prominent on hover\n      let hoverShadow = hoverState.filters.push(new am4core.DropShadowFilter());\n      hoverShadow.opacity = 0.7;\n      hoverShadow.blur = 5;\n\n      // Add a legend\n      chart.legend = new am4charts.Legend();\n\n      chart.data = [{\n         \"country\": \"Product 1\",\n         \"litres\": 351.9\n      }, {\n         \"country\": \"Product 2\",\n         \"litres\": 165.8\n      }, {\n         \"country\": \"Product 3\",\n         \"litres\": 139.9\n      }, {\n         \"country\": \"Product 4\",\n         \"litres\": 128.3\n      }];\n      return() => {\n         if (chart) {\n            chart.dispose();\n         }\n      }\n   },[])\n\n   return (\n      <RctCardContent>\n         <div id=\"chartsales\" style={{ width: \"100%\", height: \"500px\" }}></div>\n      </RctCardContent>\n   );\n}\n\nexport default SalesDoughnutChart;"],"sourceRoot":""}